create_diskimage ( ) {
	pprint 2 "build diskimage"
    pprint 3 "log: ${NANO_OBJ}/_.di"

	(
	echo "NANO_MEDIASIZE:	$NANO_MEDIASIZE"
	echo "NANO_IMAGES:	$NANO_IMAGES"
	echo "NANO_SECTS:	$NANO_SECTS"
	echo "NANO_HEADS:	$NANO_HEADS"
	echo "NANO_CODESIZE:	$NANO_CODESIZE"
	echo "NANO_CONFSIZE:	$NANO_CONFSIZE"
	echo "NANO_DATASIZE:	$NANO_DATASIZE"


	## Calculate the fdisk disk layout.
	echo $NANO_MEDIASIZE $NANO_IMAGES \
		$NANO_SECTS $NANO_HEADS \
		$NANO_CODESIZE $NANO_CONFSIZE $NANO_DATASIZE |
	awk '
	{
		printf "# %s\n", $0

		# size of cylinder in sectors
		cs = $3 * $4

		# number of full cylinders on media
		cyl = int ($1 / cs)

		# output fdisk geometry spec, truncate cyls to 1023
		if (cyl <= 1023)
			print "g c" cyl " h" $4 " s" $3
		else
			print "g c" 1023 " h" $4 " s" $3

		if ($7 > 0) { 
			# size of data partition in full cylinders
			dsl = int (($7 + cs - 1) / cs)
		} else {
			dsl = 0;
		}

		# size of config partition in full cylinders
		csl = int (($6 + cs - 1) / cs)

		if ($5 == 0) {
			# size of image partition(s) in full cylinders
			isl = int ((cyl - dsl - csl) / $2)
		} else {
			isl = int (($5 + cs - 1) / cs)
		}

		# First image partition start at second track
		print "p 1 165 " $3, isl * cs - $3
		c = isl * cs;

		# Second image partition (if any) also starts offset one 
		# track to keep them identical.
		if ($2 > 1) {
			print "p 2 165 " $3 + c, isl * cs - $3
			c += isl * cs;
		}

		# Config partition starts at cylinder boundary.
		print "p 3 165 " c, csl * cs
		c += csl * cs

		# Data partition (if any) starts at cylinder boundary.
		if ($7 > 0) {
			print "p 4 165 " c, dsl * cs
		} else if ($7 < 0 && $1 > c) {
			print "p 4 165 " c, $1 - c
		} else if ($1 < c) {
			print "Disk space overcommitted by", \
			    c - $1, "sectors" > "/dev/stderr"
			exit 2
		}

		# Force slice 1 to be marked active. This is necessary
		# for booting the image from a USB device to work.
		print "a 1"
	}
	' > ${NANO_OBJ}/_.fdisk

	IMG=${NANO_DISKIMGDIR}/${NANO_IMGNAME}
	MNT=${NANO_OBJ}/_.mnt
	mkdir -p ${MNT}

	if [ "${NANO_MD_BACKING}" = "swap" ] ; then
		MD=`mdconfig -a -t swap -s ${NANO_MEDIASIZE} -x ${NANO_SECTS} \
			-y ${NANO_HEADS}`
	else
		echo "Creating md backing file..."
		rm -f ${IMG}
		dd if=/dev/zero of=${IMG} seek=${NANO_MEDIASIZE} count=0
		MD=`mdconfig -a -t vnode -f ${IMG} -x ${NANO_SECTS} \
			-y ${NANO_HEADS}`
	fi

	trap "echo 'Running exit trap code' ; df -i ${MNT} ; umount ${MNT} || true ; mdconfig -d -u $MD" 1 2 15 EXIT

	fdisk -i -f ${NANO_OBJ}/_.fdisk ${MD}
    fdisk ${MD}
    # XXX: params
    # XXX: pick up cached boot* files, they may not be in image anymore.
    boot0cfg -B -b ${NANO_WORLDDIR}/${NANO_BOOTLOADER} ${NANO_BOOT0CFG} ${MD}
    bsdlabel -w -B -b ${NANO_WORLDDIR}/boot/boot ${MD}s1
    bsdlabel ${MD}s1

    # Create first image
    populate_slice /dev/${MD}s1a ${NANO_WORLDDIR} ${MNT} "s1a"
    mount /dev/${MD}s1a ${MNT}
    echo "Generating mtree..."
    ( cd ${MNT} && mtree -c ) > ${NANO_OBJ}/_.mtree
    ( cd ${MNT} && du -k ) > ${NANO_OBJ}/_.du
    umount ${MNT}

	if [ $NANO_IMAGES -gt 1 -a $NANO_INIT_IMG2 -gt 0 ] ; then
        # Duplicate to second image (if present)
        echo "Duplicating to second image..."
        dd if=/dev/${MD}s1 of=/dev/${MD}s2 bs=64k
        mount /dev/${MD}s2a ${MNT}
        for f in ${MNT}/etc/fstab ${MNT}/conf/base/etc/fstab
        do
            sed -i "" "s=${NANO_DRIVE}s1=${NANO_DRIVE}s2=g" $f
        done
        umount ${MNT}
        # Override the label from the first partition so we
        # don't confuse glabel with duplicates.
        if [ ! -z ${NANO_LABEL} ]; then
            tunefs -L ${NANO_LABEL}"s2a" /dev/${MD}s2a
        fi
    fi

	# Create Config slice
    populate_cfg_slice /dev/${MD}s3 "${NANO_CFGDIR}" ${MNT} "s3"

    # Create Data slice, if any.
    if [ $NANO_DATASIZE -ne 0 ] ; then
        populate_data_slice /dev/${MD}s4 "${NANO_DATADIR}" ${MNT} "s4"
    fi

    if [ "${NANO_MD_BACKING}" = "swap" ] ; then
        echo "Writing out ${NANO_IMGNAME}..."
        dd if=/dev/${MD} of=${IMG} bs=64k
    fi

    if ${do_copyout_partition} ; then
        echo "Writing out _.disk.image..."
        dd if=/dev/${MD}s1 of=${NANO_DISKIMGDIR}/_.disk.image bs=64k
    fi
    mdconfig -d -u $MD

	trap - 1 2 15 EXIT

	) > ${NANO_OBJ}/_.di 2>&1
}
